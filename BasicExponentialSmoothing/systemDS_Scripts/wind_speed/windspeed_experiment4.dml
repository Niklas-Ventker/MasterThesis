# Read the CSV file into a frame
# wind_speed = read("/Users/niklas/Documents/GitHub/Uni/10_Masterarbeit/data_files/prepocessed_datafiles/wind_speed.csv", format="csv", header=TRUE, sep=",", rows=25264999, cols=1)
wind_speed = read("/Users/niklas/Documents/GitHub/MasterThesis/0_Data_files/replicated_preprocessed_data_files/wind_speed.csv", format="csv", header=FALSE, sep=",", rows=65689000, cols=1)

# Print the size of the data
print("Dataframe wind_speed has " + toString(nrow(wind_speed)) + " rows.")

# Parameters
alpha = 0.7

# Vector to store execution times
number_of_executions = 10
execution_times = matrix(0, number_of_executions, 1)

# Initialize smoothed_value
smoothed_value = wind_speed[1]

# Perform exponential smoothing on the data
for (i in 1:number_of_executions) {
    start_time = time()

    # Vectorized exponential smoothing
    n = nrow(wind_speed)
    weights = rev(alpha * (1 - alpha) ^ seq(n-1,0,-1))
    smoothed = (cumsum(weights * wind_speed))
    smoothed_value = smoothed[1] / sum(weights)

    # End timing and calculate execution time
    end_time = time()
    function_time = (end_time - start_time) / 1000000000 # Convert nanoseconds to seconds
    print(function_time)
    execution_times[i, 1] = function_time
}

# Calculate the function time
function_time <- avg(execution_times)

# Print the results
print('### Dataset wind_speed')
print('### #2 Vectorized \n')
print('The last smoothed value for wind_speed is: ' + toString(smoothed_value))
print('The function was executed in ' + toString(function_time) + ' seconds')