# Load data files
# data_a = read("/Users/niklas/Documents/GitHub/MasterThesis/0_Data_files/replicated_preprocessed_data_files/wind_speed.csv", format="csv", header=FALSE, sep=",")[,1]
# data_b = read("/Users/niklas/Documents/GitHub/MasterThesis/0_Data_files/replicated_preprocessed_data_files/energy_generation_solar.csv", format="csv", header=FALSE, sep=",")[,1]
# data_c = read("/Users/niklas/Documents/GitHub/MasterThesis/0_Data_files/replicated_preprocessed_data_files/heart_rate.csv", format="csv", header=FALSE, sep=",")[,1]
# data_d = read("/Users/niklas/Documents/GitHub/MasterThesis/0_Data_files/replicated_preprocessed_data_files/temperature_delhi.csv", format="csv", header=FALSE, sep=",")[,1]
# data_e = read("/Users/niklas/Documents/GitHub/MasterThesis/0_Data_files/replicated_preprocessed_data_files/stock_open_microsoft.csv", format="csv", header=FALSE, sep=",")[,1]
data_f = read("/Users/niklas/Documents/GitHub/MasterThesis/0_Data_files/replicated_preprocessed_data_files/nyctaxitraffic.csv", format="csv", header=FALSE, sep=",")[,1]

# Define parameters for testing
lags = 2
vector = (0.9208, -0.0111, 0.0766)
order = 1
theta = (0.3, 0.3)

# Expected outputs
expected_output_complete_a = 3.059677
expected_output_complete_b = 61.78846
expected_output_complete_c = -6.16423
expected_output_complete_d = -1.066503
expected_output_complete_e = 6.920413
expected_output_complete_f = 1143.753

# Vectorized ARIMA Complete Test Function
start_time = time()

# Perform Integrated Component
data = diff(data_f, order)

# Perform Autoregressive Component
rows = nrow(data)
lagged_matrix = matrix(0, rows, lags + 1)
for (i in 1:(lags + 1)) {
    lagged_matrix[,i] = shift(data, -(i - 1))
}
lagged_matrix = lagged_matrix[1:(rows - lags), ]
forecast_data = lagged_matrix %*% vector

# Perform Moving Average Component
integrated_data = data
min_length = min(nrow(data), nrow(forecast_data))
original_data = data[1:min_length,]
forecast_data = forecast_data[1:min_length,]
errors = original_data - forecast_data
lagged_errors = matrix(0, nrow(errors), order)
for (i in 1:order) {
    lagged_errors[(i+1):nrow(errors),i] = errors[1:(nrow(errors)-i),1]
}
weighted_lagged_errors = lagged_errors %*% theta
updated_forecast = forecast_data + weighted_lagged_errors
last_result_f = updated_forecast[nrow(updated_forecast), 1]

end_time = time()
function_time = (end_time - start_time) / 1e9 # Convert nanoseconds to seconds

if (abs(last_result_f - expected_output_complete_f) < 0.005) {
    print("test_arima_complete_vectorized_dataset_f: PASSED: " + last_result_f)
} else {
    print("test_arima_complete_vectorized_dataset_f: FAILED")
    print(last_result_f)
}